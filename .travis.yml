# This is a special configuration file to run tests on Travis-CI via
# GitHub notifications when changes are committed.
#
# See http://travis-ci.org/ for details


# We don't need sudo so can avoid the slower legacy container-based
# TravisCI infrastructure:
sudo: false

# We need Python 2.6 or 2.7 to run Galaxy (and some of the wrappers)
# but don't really care which.
language: python
python:
 - "2.6"
 - "2.7"

# We use the TravisCI build matrix to test two versions of Galaxy,
# the current development branch (dev), and as a proxy for the
# current stable release, master:
#
env:
 - GALAXY_BRANCH=dev
 - GALAXY_BRANCH=master

# Planemo Lint
# ============
#
# Planemo can be run to check tools separately from Galaxy, and this
# is fast so we do it *before* the slow process of installing Galaxy
# and running the tool tests.
#
#
# Installing Galaxy
# =================
#
# Before installing our Galaxy wrappers, we need to install Galaxy.
#
# Galaxy used to be developed in hg using BitBucket, but cloning with
# hg or getting a specific revision with wget was quite slow. Using
# git clone with a mirror on GitHub was faster, while getting the
# latest revision with wget from GitHub was even faster.
#
# We therefore use wget with the new official Galaxy repository on
# GitHub, https://github.com/galaxyproject/galaxy
#
#
# Installing Tool Dependencies
# ============================
#
# We grab Galaxy, and will later make configuration changes specifically
# for testing our tools. Otherwise we use the default settings such as
# running with an SQLite database.
#
# We also need to install our tool dependencies, e.g. NCBI BLAST+ binaries,
# which we will do manually rather than via a (local) Galaxy Tool Shed.
#

before_install:
 - echo "Using planemo lint to check for obvious tool errors"
 - pip install planemo
 - planemo shed_lint --report_level warn --tools --fail_level error --recursive ${TRAVIS_BUILD_DIR}
 - echo "Fixing permissions on Python eggs cache folder"
 - mkdir -p "$HOME/.python-eggs"
 - chmod 700 "$HOME/.python-eggs" 
 - echo "Downloading and setting up MIRA 3.4..."
 - cd ${TRAVIS_BUILD_DIR}
 - wget http://downloads.sourceforge.net/project/mira-assembler/MIRA/Older%20releases/V3.4.0/mira_3.4.1.1_prod_linux-gnu_x86_64_static.tar.bz2
 - tar -jxvf mira_3.4.1.1_prod_linux-gnu_x86_64_static.tar.bz2
 - export PATH=$PWD/mira_3.4.1.1_prod_linux-gnu_x86_64_static/bin/:$PATH
 - echo "Downloading and setting up MIRA 4.0..."
 - cd ${TRAVIS_BUILD_DIR}
 - wget http://downloads.sourceforge.net/project/mira-assembler/MIRA/stable/mira_4.0.2_linux-gnu_x86_64_static.tar.bz2
 - tar -jxvf mira_4.0.2_linux-gnu_x86_64_static.tar.bz2
 - export MIRA4=$PWD/mira_4.0.2_linux-gnu_x86_64_static/bin/
 - echo "Downloading and setting up MIRA 4.9..."
 - wget http://downloads.sourceforge.net/project/mira-assembler/MIRA/development/mira_4.9.5_2_linux-gnu_x86_64_static.tar.bz2
 - tar -jxvf mira_4.9.5_2_linux-gnu_x86_64_static.tar.bz2
 - export MIRA4_9=$PWD/mira_4.9.5_2_linux-gnu_x86_64_static/bin/
 - echo "Installing samtools..."
 - wget http://downloads.sourceforge.net/project/samtools/samtools/0.1.19/samtools-0.1.19.tar.bz2
 - tar -jxvf samtools-0.1.19.tar.bz2
 - cd samtools-0.1.19
 - make
 - export PATH=$PWD:$PATH
 - echo "Fetching Galaxy ${GALAXY_BRANCH} branch..."
 - cd ${TRAVIS_BUILD_DIR}
 - wget https://codeload.github.com/galaxyproject/galaxy/tar.gz/${GALAXY_BRANCH}
 - tar -zxvf ${GALAXY_BRANCH} | tail
 - cd galaxy-${GALAXY_BRANCH}
 - pip install requests 

# Configuring tools within Galaxy
# ===============================
#
# We setup a minimal tool_conf.xml and/or tool_conf.xml.sample file to
# get Galaxy to just test our tools, rather than via a (local) Galaxy
# Tool Shed.
#
# TODO - GALAXY_TEST_TOOL_CONF environment variable rather than symlink?
#
# We setup our tools under the Galaxy tool folder by using symlinks.
# TODO - Restructure this to auto-update in future when add folders?
#
# We setup our datatypes by adding mira.py to the Galaxy library, and
# adding an import in lib/galaxy/datatypes/registry.py, and replacing
# the datatypes_conf.xml file.
#
# We setup our sample data in the Galaxy test-data folder by copying them
# (using symlinks might be faster?)
#

# We then want to use run.sh to setup all the sample files, fetch eggs etc,
# but not actually start running Galaxy. One way to do this is by calling
# "./run.sh --stop-daemon" but must override its error level 1 return value.
#

install:
 - cd ${TRAVIS_BUILD_DIR}/galaxy-${GALAXY_BRANCH}
 - export GALAXY_TEST_UPLOAD_ASYNC=false
 - export GALAXY_TEST_DB_TEMPLATE=https://github.com/jmchilton/galaxy-downloads/raw/master/db_gx_rev_0127.sqlite
 - ln -s ${TRAVIS_BUILD_DIR}/.travis.tool_conf.xml tool_conf.xml
 - rm -f config/tool_conf.xml.sample
 - ln -s ${TRAVIS_BUILD_DIR}/.travis.tool_conf.xml config/tool_conf.xml.sample
 - mkdir /tmp/unwanted_tools
 - for i in $( ls tools/ ); do mv tools/$i /tmp/unwanted_tools/$i ; done
 - mkdir tools/data_source
 - mv /tmp/unwanted_tools/data_source/upload.xml tools/data_source/upload.xml
 - mv /tmp/unwanted_tools/data_source/upload.py tools/data_source/upload.py
 - for i in $( ls ${TRAVIS_BUILD_DIR}/tools/ ); do ln -s ${TRAVIS_BUILD_DIR}/tools/$i/ tools/$i ; done
 - ln -s ${TRAVIS_BUILD_DIR}/datatypes/mira_datatypes/mira.py lib/galaxy/datatypes/mira.py
 - ln -s ${TRAVIS_BUILD_DIR}/.travis.datatypes_conf.xml datatypes_conf.xml
 - cp ${TRAVIS_BUILD_DIR}/test-data/* test-data/
 - ./run.sh --stop-daemon || true
 - python scripts/fetch_eggs.py


# Testing tools in Galaxy
# =======================
#
# Having setup our Galaxy with a minimal tool_conf.xml / tool_conf.xml.sample
# we could run_functional_tests.sh to run just our tests (grouped under a
# common section "travis" in the XML file for this purpose).
#
# ./run_functional_tests.sh -sid Continuous-Integration-Travis
#
# But since we're testing everything, planemo test should work too:

script:
 - planemo test ${TRAVIS_BUILD_DIR}/tools/

#The email defaults are too talkative while we're getting Travis working nicely.
notifications:
  email: false
