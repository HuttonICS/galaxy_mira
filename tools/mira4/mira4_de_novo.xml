<tool id="mira_4_0_de_novo" name="MIRA v4.0 de novo assember" version="0.0.1">
    <description>Takes Sanger, Roche 454, Solexa/Illumina, Ion Torrent and PacBio reads</description>
    <requirements>
        <requirement type="binary">mira</requirement>
        <requirement type="package" version="4.0">MIRA</requirement>
    </requirements>
    <version_command interpreter="python">mira4.py --version</version_command>
    <command interpreter="python">
mira4.py $manifest $out_maf $out_fasta $out_log
    </command>
    <inputs>
        <param name="job_type" type="select" label="Assembly type">
            <option value="genome">Genome</option>
            <option value="est">EST (transcriptome)</option>
        </param>
        <param name="job_quality" type="select" label="Assembly quality grade">
            <option value="accurate">Accurate</option>
            <option value="draft">Draft</option>
        </param>
        <repeat name="read_group" title="Read Group" min="1">
            <param name="technology" type="select" label="Read technology">
                <option value="solexa">Solexa/Illumina</option>
                <option value="sanger">Sanger cappillary sequencing</option>
                <option value="454">Roche 454</option>
                <option value="iontor">Ion Torrent</option>
                <option value="pcbiolq">PacBio low quality (raw)</option>
                <option value="pcbiohq">PacBio high quality (corrected)</option>
                <option value="text">Synthetic reads (database entries, consensus sequences, artifical reads, etc)</option>
		<!-- TODO reference/backbone as an entry here? -->
            </param>
            <param name="segment_placement" type="select" label="Pairing type (segment placing)">
                <option value="">None (e.g. single end sequencing)</option>
                <option value="FR">---&gt; &lt;--- (e.g. Sanger capillary or Solexa/Illumina paired-end library)</option>
                <option value="RF">&lt;--- ---&gt; (e.g. Solexa/Illumina mate-pair library)</option>
                <option value="SB">2---&gt; 1---&gt; (e.g. Roche 454 paired-end libraries or IonTorrent long-mate; see note)</option>
                <option value="?">Unknown or not relevant (e.g. primer walking with Sanger capillary sequencing)</option>
            </param>
	    <param name="filenames" type="data" format="fastq,mira" multiple="true" required="true" label="Read file(s)"
		   help="Multiple files allowed, for example paired reads can be given as two files (MIRA looks at read names to identify pairs)." />
        </repeat>
    </inputs>
    <outputs>
        <data name="out_fasta" format="fasta" label="MIRA de novo contigs (FASTA)" />
        <data name="out_maf" format="mira" label="MIRA de novo assembly" />
        <data name="out_log" format="txt" label="MIRA de novo log" />
    </outputs>
    <configfiles>
        <configfile name="manifest">
project = MIRA
job = denovo,${job_type},${job_quality}
parameters = -GE:not=1 -NW:cmrnl -DI:trt=/tmp
## -GE:not is short for -GENERAL:number_of_threads and using one (1)
## can be useful for repeatability of assemblies and bug hunting.
##
## -NW:cmrnl is short for -NAG_AND_WARN:check_maxreadnamelength
## and without this MIRA aborts with read names over 40 characters
## due to limitations of some downstream tools.
##
## -DI:trt is short for -DIRECTORY:tmp_redirected_to and should
## point to a local hard drive (not something like NFS on network).

#for $rg in $read_group

##This bar goes into the manifest as a comment line
#------------------------------------------------------------------------------

readgroup
technology = ${rg.technology}
##MIRA will accept multiple filenames on one data line, or multiple data lines
#for $f in $rg.filenames
#if str($rg.segment_placement) != ""
##Record the segment placement (if any)
segmentplacement = ${rg.segment_placement}
#end if
##Must now map Galaxy datatypes to MIRA file types...
#if $f.ext.startswith("fastq")
##MIRA doesn't like fastqsanger etc, just plain old fastq:
data = fastq::$f
#elif $f.ext == "mira"
##We're calling *.maf the "mira" format in Galaxy (name space collision)
data = maf::$f
#else
##MIRA is happy with fasta as name,
data = ${f.ext}::$f
#end if
#end for
#end for
        </configfile>
    </configfiles>
    <tests>
            <!-- Based on the MIRA v3.4.1.1 bundled minidemo/estdemo2 which uses
                 strain data and miraSearchESTSNPs. Here we just assemble it. --> 
<!--
Commenting out test until Galaxy framework is fixed,
https://trello.com/c/zSTrfDOB/820-disambiguated-conditional-parameters-not-supported-in-unit-tests
        <test>
            <param name="job_method" value="denovo" />
            <param name="job_type" value="est" />
            <param name="job_qual" value="accurate" />
            <param name="condBackbone.use" value="false" />
            <param name="condSanger.use" value="true" />
            <param name="condSanger.filename" value="tvc_mini.fastq" ftype="fastq" />
            <param name="condRoche.use" value="false" />
            <param name="condIllumina.use" value="false" /> 
            <param name="condIonTorrent.use" value="false" />
            <output name="out_fasta" file="tvc_contigs.fasta" ftype="fasta" />
	</test>
-->
    </tests>
    <help>

**What it does**

Runs MIRA v4.0 in de novo mode, collects the output, and throws away all the temporary files.

MIRA is an open source assembly tool capable of handling sequence data from
a range of platforms (Sanger capillary, Solexa/Illumina, Roche 454, Ion Torrent
and also PacBio).

It is particularly suited to small genomes such as bacteria.

**Notes**

.. class:: warningmark

Note that the raw data for Roche 454 and Ion Torrent paired-end libraries
sequences a circularised fragment such that the raw data starts with the
end of the fragment, a linker, then the start of the fragment. This means
both the start and end are sequenced from the same strand, and thus should
be given to MIRA as orientation "2---&gt; 1---&gt;". However, in order to
use this data with traditional tools expecting Sanger capillary style
libraries which expect "---&gt; &lt;---" your FASTQ files may have been
pre-processed to mimic this by reverse complementing one of the pair.

**Citation**

If you use this Galaxy tool in work leading to a scientific publication please
cite the following papers:

Peter J.A. Cock, Björn A. Grüning, Konrad Paszkiewicz and Leighton Pritchard (2013).
Galaxy tools and workflows for sequence analysis with applications
in molecular plant pathology. PeerJ 1:e167
http://dx.doi.org/10.7717/peerj.167

Bastien Chevreux, Thomas Wetter and Sándor Suhai (1999).
Genome Sequence Assembly Using Trace Signals and Additional Sequence Information.
Computer Science and Biology: Proceedings of the German Conference on Bioinformatics (GCB) 99, pp. 45-56.
http://www.bioinfo.de/isb/gcb99/talks/chevreux/main.html

This wrapper is available to install into other Galaxy Instances via the Galaxy
Tool Shed at http://toolshed.g2.bx.psu.edu/view/peterjc/mira4_assembler
    </help>
</tool>
