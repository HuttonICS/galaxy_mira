<tool id="mira_assembler" name="Assemble with MIRA" version="0.0.1">
    <description>Takes Sanger, Roche, and Illumina data</description>
	<command interpreter="python">mira.py mira $out_fasta $out_ace $out_caf $out_wig $out_log
##Give the wrapper script list of output filenames, then the mira command...
mira --job=$job_method,$job_type,$job_quality

##Input files
##if $condBackbone.use == "true":
##end if
#if $condSanger.use == "true":
    Sanger_SETTINGS
    ## Not easy to add sanger to --job, so use load_sequence_data(lsd) instead
    -LR:lsd=yes
    ## I expect hard trimmed FASTQ files with no NCBI traceinfo XML file
    -LR:mxti=no -LR:ft=fastq -FN:fqi=${condSanger.filename}
#end if
#if $condRoche.use == "true":
    454_SETTINGS
    ## Not easy to add 454 to --job, so use load_sequence_data(lsd) instead
    -LR:lsd=yes
    ## I expect hard trimmed FASTQ files with no NCBI traceinfo XML file
    -LR:mxti=no -LR:ft=fastq -FN:fqi=${condRoche.filename}
#end if
#if $condIllumina.use == "true":
    SOLEXA_SETTINGS
    ## Not easy to add solexa to --job, so use load_sequence_data(lsd) instead
    -LR:lsd=yes -LR:ft=fastq -FN:fgi=${condIllumina.filename}
    ##TODO - Look at -LR FASTQ qual offset (fqqo)
#end if


##Output files
COMMON_SETTINGS
##remove_rollover_logs, remove_log_directory
-OUT:rrol=yes -OUT:rld=yes

    </command>
	<inputs>
        <param name="job_method" type="select" label="Assembly method">
            <option value="denovo">De novo</option>
            <option value="mapping">Mapping</option>
        </param>
        <param name="job_type" type="select" label="Assembly type">
            <option value="genome">Genome</option>
            <option value="est">EST (transcriptome)</option>
        </param>
        <param name="job_quality" type="select" label="Assembly quality grade">
            <option value="normal">Normal</option>
            <option value="draft">Draft</option>
            <option value="accurate">Accurate</option>
        </param>
        <!-- Backbone -->
        <conditional name="condBackbone">
           <param name="use" type="select" label="Backbones/reference chromosomes?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq" label="Backbone sequences" description="FASTQ format" />
           </when>
        </conditional>
        <!-- Sanger -->
        <conditional name="condSanger">
           <param name="use" type="select" label="Sanger/Capillary reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq" label="Sanger/Capillary reads file" description="FASTQ format" />
           </when>
        </conditional>
        <!-- Roche 454 -->
        <conditional name="condRoche">
           <param name="use" type="select" label="454 reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq,sff" label="Roche 454 reads file" description="FASTQ format" />
           </when>
        </conditional>
        <!-- Illumina -->
        <conditional name="condIllumina">
           <param name="use" type="select" label="Solexa/Illumina reads?">
               <option value="false">No</option>
               <option value="true">Yes</option>
           </param>
           <when value="false" />
           <when value="true">
              <param name="filename" type="data" format="fastq" label="Solexa/Illumina reads file" description="FASTQ format" />
           </when>
        </conditional>
	</inputs>
	<outputs>
	    <data name="out_fasta" format="fasta" label="MIRA contigs (FASTA)" />
	    <data name="out_caf" format="txt" label="MIRA contigs (CAF)" />
	    <data name="out_ace" format="txt" label="MIRA contigs (ACE)" />
	    <data name="out_wig" format="wig" label="MIRA coverage (Wiggle)" />
	    <data name="out_log" format="txt" label="MIRA log" />
    </outputs>
	<tests>
	</tests>
	<requirements>
		<requirement type="python-module">Bio</requirement>
	</requirements>
	<help>

**What it does**

Runs MIRA v3, throws away all the temporary files, and most of the output.

**Citation**

This tool uses MIRA. If you use this tool in scientific work leading to a
publication, please cite:

Chevreux et al. (1999) Genome Sequence Assembly Using Trace Signals and Additional Sequence Information Computer Science and Biology: Proceedings of the German Conference on Bioinformatics (GCB) 99, pp. 45-56.

	</help>
</tool>
